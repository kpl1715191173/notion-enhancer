{"version":3,"file":"electron.js","sourceRoot":"","sources":["../../../src/main/integrations/electron.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE7C,OAAO,EACL,GAAG,EACH,YAAY,EACZ,MAAM,GAEP,MAAM,UAAU,CAAC;AAIlB,qDAAqD;AACrD;IAAA;QAME;;WAEG;QACI,SAAI,GAAW,QAAQ,CAAC,EAAE,CAAC;IA2DpC,CAAC;IAzDC;;OAEG;IACI,4BAAS,GAAhB;QAAA,iBA2BC;QA1BC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAExC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;YAChB,sCAAsC;YACtC,KAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAC9C,KAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,EAAE,CAAC,sBAAsB,EAAE,UAAC,CAAC,EAAE,QAAQ;YACzC,yDAAyD;YACzD,oDAAoD;YACpD,YAAY,CAAC;gBACX,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE;oBAC1B,OAAO;iBACR;gBAED,IAAM,OAAO,GAAI,aAAa,EAAE,CAAC,SAAS,EAAqB,CAAC,UAAU,EAAE,CAAC;gBAC7E,IAAM,UAAU,GAAG,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAEhF,KAAI,CAAC,sBAAsB,CAAC,UAAU,IAAI,iBAAe,QAAQ,CAAC,EAAE,MAAG,EAAE,QAAe,EAAE;oBACxF,WAAW;oBACX,UAAU;oBACV,WAAW;iBACZ,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACK,yCAAsB,GAA9B,UAA+B,QAAgB,EAAE,OAA4B,EAAE,MAAqB;QAArB,uBAAA,EAAA,WAAqB;QAElG,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAS,CAAC;QAEhD,OAAO,CAAC,IAAI,GAAG,UAAC,KAAa;YAAE,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,6BAAO;;YACpC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;gBACrD,IAAM,UAAU,GAAG;oBACjB,QAAQ,EAAE,UAAU;oBACpB,OAAO,EAAK,QAAQ,SAAI,KAAO;oBAC/B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI;oBACtC,IAAI,EAAE,IAAI;iBACX,CAAC;gBACF,IAAM,MAAI,GAAG,aAAa,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACtD,IAAI,MAAI,EAAE;oBACR,aAAa,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;iBAC3C;aACF;YAED,OAAO,IAAI,yBAAC,KAAK,GAAK,IAAI,GAAE;QAC9B,CAAC,CAAC;IACJ,CAAC;IAlED;;OAEG;IACW,WAAE,GAAW,UAAU,CAAC;IAgExC,eAAC;CAAA,AApED,IAoEC;SApEY,QAAQ","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport {\n  app,\n  powerMonitor,\n  screen,\n  // tslint:disable-next-line:no-implicit-dependencies\n} from 'electron';\n\nimport { ElectronClient } from '../../common';\n\n/** Electron integration that cleans up the event. */\nexport class Electron implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Electron';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Electron.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    this._instrumentBreadcrumbs('app', app);\n\n    app.once('ready', () => {\n      // We can't access these until 'ready'\n      this._instrumentBreadcrumbs('Screen', screen);\n      this._instrumentBreadcrumbs('PowerMonitor', powerMonitor);\n    });\n\n    app.on('web-contents-created', (_, contents) => {\n      // SetImmediate is required for contents.id to be correct\n      // https://github.com/electron/electron/issues/12036\n      setImmediate(() => {\n        if (contents.isDestroyed()) {\n          return;\n        }\n\n        const options = (getCurrentHub().getClient() as ElectronClient).getOptions();\n        const customName = options.getRendererName && options.getRendererName(contents);\n\n        this._instrumentBreadcrumbs(customName || `WebContents[${contents.id}]`, contents as any, [\n          'dom-ready',\n          'load-url',\n          'destroyed',\n        ]);\n      });\n    });\n  }\n\n  /**\n   * Hooks into the Electron EventEmitter to capture breadcrumbs for the\n   * specified events.\n   */\n  private _instrumentBreadcrumbs(category: string, emitter: NodeJS.EventEmitter, events: string[] = []): void {\n    type Emit = (event: string, ...args: unknown[]) => boolean;\n    const emit = emitter.emit.bind(emitter) as Emit;\n\n    emitter.emit = (event: string, ...args) => {\n      if (events.length === 0 || events.indexOf(event) > -1) {\n        const breadcrumb = {\n          category: 'electron',\n          message: `${category}.${event}`,\n          timestamp: new Date().getTime() / 1000,\n          type: 'ui',\n        };\n        const self = getCurrentHub().getIntegration(Electron);\n        if (self) {\n          getCurrentHub().addBreadcrumb(breadcrumb);\n        }\n      }\n\n      return emit(event, ...args);\n    };\n  }\n}\n"]}