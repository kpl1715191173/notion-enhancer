Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonBackend = exports.getNameFallback = exports.SDK_NAME = exports.IPC_SCOPE = exports.IPC_EVENT = exports.IPC_PING = void 0;
var core_1 = require("@sentry/core");
Object.defineProperty(exports, "CommonBackend", { enumerable: true, get: function () { return core_1.BaseBackend; } });
var utils_1 = require("@sentry/utils");
/** IPC to ping the main process when initializing in the renderer. */
exports.IPC_PING = 'sentry-electron.ping';
/** IPC to send a captured event (exception or message) to Sentry. */
exports.IPC_EVENT = 'sentry-electron.event';
/** IPC to capture a scope globally. */
exports.IPC_SCOPE = 'sentry-electron.scope';
exports.SDK_NAME = 'sentry.javascript.electron';
/** Get the name of an electron app for <v5 and v7< */
function getNameFallback() {
    if (!require) {
        throw new utils_1.SentryError('Could not require("electron") to get appName. Please ensure you pass `appName` to Sentry options');
    }
    var electron = require('electron');
    // if we're in the main process
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    if (electron && electron.app) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        var appMain = electron.app;
        return appMain.name || appMain.getName();
    }
    // We're in the renderer process but the remote module is not available
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    if (!electron || !electron.remote) {
        throw new utils_1.SentryError('The Electron `remote` module was not available to get appName. Please ensure you pass `appName` to Sentry options');
    }
    // Remote is available so get the app name
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    var a = electron.remote.app;
    return a.name || a.getName();
}
exports.getNameFallback = getNameFallback;
//# sourceMappingURL=common.js.map